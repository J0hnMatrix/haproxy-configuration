global
	log /dev/log    local0
	log /dev/log    local1 notice
	# chroot /var/lib/haproxy
	# stats socket /run/haproxy/admin.sock mode 660 level admin
	# stats timeout 30s
	# user haproxy
	# group haproxy
	daemon
	maxconn 2048
	tune.ssl.default-dh-param 4096

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	# https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	# http://www.mattzuba.com/2015/07/hardening-haproxy-for-an-a-rating/

	ssl-default-bind-ciphers ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA
	ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11

	ssl-default-server-ciphers ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA
	ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11
	
	
defaults
	log     global
	mode    http
	option  httplog
	option  dontlognull
	option  httpchk
	option	forwardfor
	option	http-keep-alive
	timeout connect 5000
	timeout client  50000
	timeout server  50000
	# errorfile 400 /etc/haproxy/errors/400.http
	# errorfile 403 /etc/haproxy/errors/403.http
	# errorfile 408 /etc/haproxy/errors/408.http
	# errorfile 500 /etc/haproxy/errors/500.http
	# errorfile 502 /etc/haproxy/errors/502.http
	# errorfile 503 /etc/haproxy/errors/503.http
	# errorfile 504 /etc/haproxy/errors/504.http
	maxconn 2000
	
	# compression algo gzip
	# compression type text/html text/plain text/css text/javascript


frontend http-in
	bind *:80

	# Redirect http trafic to https
	redirect scheme https if !{ ssl_fc }

	# Redirect to default backend
	# default_backend error

frontend https-in
	bind *:443 ssl alpn http/1.1 crt /etc/haproxy/certs/your.key.pem ecdhe secp384r1
	http-response replace-header Location ^http://(.*)$	https://\1
	
	http-request set-header X-Forwarded-Proto https
	http-request set-header X-Forwarded-Port 443

# This line is for HSTS:
	http-response set-header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload;"


# Define hosts

	use_backend	custom1-backend if { hdr_beg(Host) -i custom1.  }
	use_backend     custom2-backend if { path_beg /custom2 }

	
# Define backends

# Standard backend
backend custom1-backend
	server hostname				<ip-addr>:<port>/<suffix>

# This backend is for Pihole as an example
backend custom2-backend
	http-request replace-uri ^/<your-suffix>/(.*) /admin/\1
	server hostname		<ip-addr>:<port>/admin

